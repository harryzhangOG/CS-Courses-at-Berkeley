package amazons;

import ucb.gui2.TopLevel;
import ucb.gui2.LayoutSpec;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import java.util.concurrent.ArrayBlockingQueue;
/** The GUI controller for an Amazons board and buttons.
 *  @author Harry Zhang
 */
class GUI extends TopLevel implements View, Reporter {

    /** Minimum size of board in pixels. */
    private static final int MIN_SIZE = 500;

    /** A new window with given TITLE providing a view of an Amazons board. */
    GUI(String title) {
        super(title, true);
        addMenuButton("Game->Quit", this::quit);
        addMenuButton("Settings->Seed", this::newSeed);
        addMenuButton("Game->New", this::doNew);
        addMenuButton("Settings->Manual Black", this::doManualBlack);
        addMenuButton("Settings->Manual White", this::doManualWhite);
        addMenuButton("Settings->Auto Black", this::doAutoBlack);
        addMenuButton("Settings->Auto White", this::doAutoWhite);
        _widget = new BoardWidget(_pendingCommands);
        add(_widget,
            new LayoutSpec("y", 1,
                           "height", 1,
                           "width", 3));
    }
    /** Response to "New" button click. */
    private void doNew(String dummy) {
        _pendingCommands.offer("new");
    }
    /** Response to "Manual" button click. */
    private void doManualBlack(String dummy) {
        _pendingCommands.offer("manual Black");
    }
    /** Response to "Manual" button click. */
    private void doManualWhite(String dummy) {
        _pendingCommands.offer("manual white");
    }
    /** Response to "Auto" button click. */
    private void doAutoBlack(String dummy) {
        _pendingCommands.offer("auto Black");
    }
    /** Response to "Auto" button click. */
    private void doAutoWhite(String dummy) {
        _pendingCommands.offer("auto White");
    }

    /** Response to "Quit" button click. */
    private void quit(String dummy) {
        _pendingCommands.offer("quit");
    }

    /** Pattern describing the 'seed' command's arguments. */
    private static final Pattern SEED_PATN =
        Pattern.compile("\\s*(-?\\d{1,18})\\s*$");

    /** Response to "Seed" button click. */
    private void newSeed(String dummy) {
        String response =
            getTextInput("Enter new random seed.",
                         "New seed",  "plain", "");
        if (response != null) {
            Matcher mat = SEED_PATN.matcher(response);
            if (mat.matches()) {
                _pendingCommands.offer(String.format("seed %s", mat.group(1)));
            } else {
                showMessage("Enter an integral seed value.", "Error", "error");
            }
        }
    }

    /** Return the next command from our widget, waiting for it as necessary.
     *  The BoardWidget uses _pendingCommands to queue up moves that it
     *  receives.  Thie class uses _pendingCommands to queue up commands that
     *  are generated by clicking on menu items. */
    String readCommand() {
        try {
            _widget.setMoveCollection(true);
            String cmnd = _pendingCommands.take();
            _widget.setMoveCollection(false);
            return cmnd;
        } catch (InterruptedException excp) {
            throw new Error("unexpected interrupt");
        }
    }

    @Override
    public void update(Board board) {
        _widget.update(board);
    }

    @Override
    public void reportError(String fmt, Object... args) {
        showMessage(String.format(fmt, args), "Amazons Error", "error");
    }

    @Override
    public void reportNote(String fmt, Object... args) {
        showMessage(String.format(fmt, args), "Amazons Message", "information");
    }

    @Override
    public void reportMove(Move unused) {
    }

    /** The board widget. */
    private BoardWidget _widget;

    /** Queue of pending commands resulting from menu clicks and moves on the
     *  board.  We use a blocking queue because the responses to clicks
     *  on the board and on menus happen in parallel to the methods that
     *  call readCommand, which therefore needs to wait for clicks to happen. */
    private ArrayBlockingQueue<String> _pendingCommands =
        new ArrayBlockingQueue<>(5);

}
